package AFCProg;

/* Generated By:JavaCC: Do not edit this line. gramConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface gramConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int BEGIN = 2;
  /** RegularExpression Id. */
  int END = 3;
  /** RegularExpression Id. */
  int INIT = 4;
  /** RegularExpression Id. */
  int INTERFACE = 5;
  /** RegularExpression Id. */
  int ACT = 6;
  /** RegularExpression Id. */
  int COMPONENT = 7;
  /** RegularExpression Id. */
  int PROPERTY = 8;
  /** RegularExpression Id. */
  int EVENT = 9;
  /** RegularExpression Id. */
  int INV = 10;
  /** RegularExpression Id. */
  int IF = 11;
  /** RegularExpression Id. */
  int THEN = 12;
  /** RegularExpression Id. */
  int AND = 13;
  /** RegularExpression Id. */
  int OR = 14;
  /** RegularExpression Id. */
  int TRUE = 15;
  /** RegularExpression Id. */
  int FALSE = 16;
  /** RegularExpression Id. */
  int ALTERNATIVE = 17;
  /** RegularExpression Id. */
  int SEQUENCE = 18;
  /** RegularExpression Id. */
  int CHOICE = 19;
  /** RegularExpression Id. */
  int AFFECTATION = 20;
  /** RegularExpression Id. */
  int DOUBLETWOPOINTS = 21;
  /** RegularExpression Id. */
  int EQUAL = 22;
  /** RegularExpression Id. */
  int OPENPAR = 23;
  /** RegularExpression Id. */
  int CLOSEPAR = 24;
  /** RegularExpression Id. */
  int OPENACO = 25;
  /** RegularExpression Id. */
  int CLOSEACO = 26;
  /** RegularExpression Id. */
  int TWOPOINTS = 27;
  /** RegularExpression Id. */
  int COMMA = 28;
  /** RegularExpression Id. */
  int COTE = 29;
  /** RegularExpression Id. */
  int DIFF = 30;
  /** RegularExpression Id. */
  int COMPACTION = 31;
  /** RegularExpression Id. */
  int COMPNAMES = 32;
  /** RegularExpression Id. */
  int COMPROP = 33;
  /** RegularExpression Id. */
  int TYPE = 34;
  /** RegularExpression Id. */
  int ENUM = 35;
  /** RegularExpression Id. */
  int ALPHANUM = 36;
  /** RegularExpression Id. */
  int ALPHA = 37;
  /** RegularExpression Id. */
  int ID = 38;
  /** RegularExpression Id. */
  int VALUE = 39;
  /** RegularExpression Id. */
  int BOOLEAN = 40;
  /** RegularExpression Id. */
  int INTEGER = 41;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<token of kind 1>",
    "\"DEBUT\"",
    "\"FIN\"",
    "\"INITIALISATIONS\"",
    "\"INTERFACE\"",
    "\"ACTIONS\"",
    "\"COMP\"",
    "\"PROP\"",
    "\"EVT\"",
    "\"INV\"",
    "\"if\"",
    "\"then\"",
    "\"and\"",
    "\"or\"",
    "<TRUE>",
    "<FALSE>",
    "\"+\"",
    "\";\"",
    "\"~\"",
    "\":=\"",
    "\"::\"",
    "\"=\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\":\"",
    "\",\"",
    "\"\\\'\"",
    "\"<>\"",
    "<COMPACTION>",
    "<COMPNAMES>",
    "<COMPROP>",
    "<TYPE>",
    "<ENUM>",
    "<ALPHANUM>",
    "<ALPHA>",
    "<ID>",
    "<VALUE>",
    "<BOOLEAN>",
    "<INTEGER>",
    "\".\"",
    "\"-\"",
  };

}
